{"version":3,"sources":["Components/Formulario.jsx","Components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","Paciente","Tutor","Fecha","Hora","Sintomas","cita","actualizarCita","error","actualizarError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eefa3cc9.chunk.js","sourcesContent":["import React, {Fragment, useState}  from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    //Crear State de Cita\r\n    const [cita, actualizarCita] = useState({\r\n        Paciente: '',\r\n        Tutor: '',\r\n        Fecha: '',\r\n        Hora: '',\r\n        Sintomas: ''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false)\r\n\r\n    //Funcion cuando escriben \r\n\r\n    const handleChange = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    //Extraer Valores\r\n    const {Paciente, Tutor, Fecha, Hora, Sintomas } = cita;\r\n\r\n    //Cuando el usuario envia el Form\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n        // Validar\r\n        if(Paciente.trim() === '' || Tutor.trim() === '' || Fecha.trim() === '' || Hora.trim() === '' || Sintomas.trim() === ''){\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n\r\n        //Eliminar el mensaje de error previo\r\n        actualizarError(false);\r\n\r\n        //Asignar un ID\r\n        cita.id = uuidv4();\r\n\r\n        //Crear la Cita\r\n        crearCita(cita);\r\n\r\n        //Reiniciar el form\r\n        actualizarCita({\r\n            Paciente: '',\r\n            Tutor: '',\r\n            Fecha: '',\r\n            Hora: '',\r\n            Sintomas: ''\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n\r\n            { error ? <p className=\"alerta-error\"> Todos los campos son obligatorios </p>\r\n            : null }\r\n\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre del Paciente</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"Paciente\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Paciente\"\r\n                    onChange={handleChange}\r\n                    value={Paciente} \r\n                />\r\n                <label>Nombre del Tutor</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"Tutor\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del Tutor\" \r\n                    onChange={handleChange} \r\n                    value={Tutor} \r\n                />\r\n                <label>Fecha de la Cita</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"Fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={Fecha}  \r\n                />\r\n               <label>Hora de la Cita</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"Hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange} \r\n                    value={Hora} \r\n                />\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"       \r\n                    name=\"Sintomas\"    \r\n                    onChange={handleChange} \r\n                    value={Sintomas}      \r\n                ></textarea>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                    onChange={handleChange} \r\n                >Agregar</button>\r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Cita = ({cita, eliminarCita}) => ( \r\n    <div className=\"cita\">\r\n        <p>Paciente: <span>{cita.Paciente}</span></p>\r\n        <p>Tutor: <span>{cita.Tutor}</span></p>\r\n        <p>Fecha: <span>{cita.Fecha}</span></p>\r\n        <p>Hora: <span>{cita.Hora}</span></p>\r\n        <p>Sintomas: <span>{cita.Sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={ () => eliminarCita(cita.id) }\r\n        >Eliminar</button>\r\n    </div>\r\n);\r\n \r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './Components/Formulario';\nimport Cita from './Components/Cita';\n\nfunction App() {\n\n  //Citas en local Storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales=[];\n  }\n\n  //Arreglo de Citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // Use Effect para realizar ciertas operaciones cuando el State cambia\n  useEffect( () => {\n    if (citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas, citasIniciales] );\n\n  //Funcion que tome las citas y agregue la nueva\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  //Funcion que elimina citas\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !== id );\n    guardarCitas(nuevasCitas);\n  }\n\n  //Mensaje Condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus Citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita =>(\n              <Cita\n                key={cita.id} \n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}